Trenyx Language Specification (Updated)

vokar[•hello this an example of Trenyx program•]

*Syntax*

In Trenyx, `//` is used for single-line comments.

Multi-line comments in Trenyx use `/* */`:

- Code enclosed in `{}`.starting to stoping

*Control Flow*

1. `cycle` (repeat)
2. `skip` (continue)
3. `halt` (exit)
4. `resume` (resume execution)

*Data Manipulation*

1. `merge` (combine lists/tuples)
2. `split` (divide strings/lists)
3. `filter` (data filtering)
4. `transform` (data mapping)

*Error Handling*

1. `try` (attempt execution)
2. `catch` (handle exceptions)
3. `throw` (raise exceptions)

*Functions*

1. `override` (function overriding)
2. `extend` (function extension)
3. `lambda` (anonymous functions)

*Logic*

1. `xor` (exclusive OR)
2. `nor` (negated OR)
3. `nand` (negated AND)

*Operators*

1. `**` (exponentiation)
2. `//` (integer division)
3. `%=` (modulus assignment)

*Variables*

1. `con` (constant declaration)
2. `shared` (shared variables)

*Miscellaneous*

1. `sap` (module imports)
2. `kap` (module exports)
3. `debug` (debug mode)

*Keywords*

1. `omit` (if)
2. `swot` (else)
3. `surge` (while)
4. `torvik` (for)
5. `dox` (def)
6. `vokar` (print)
7. `kalt`  (input)
8. `fib` (return)
9. `threx` (and)
10. `flux` (or)
11. `sygma` (not)

*Operators*

1. `+` (addition)
2. `-` (subtraction)
3. `*` (multiplication)
4. `/` (division)
5. `==` (equality)
6. `!=` (inequality)
7. `<` (less than)
8. `>` (greater than)
9. `<=` (less than or equal)
10. `>=` (greater than or equal)
11. `&&` (Logical AND)
12. `||` (Logical OR)
13.  `!`  (Logical NOT)

*Data Types*

_Numeric Types_
1. `kal` (Integer)
2. `nexa` (Float)

_Text Type_
1. `vix` (String)

_Boolean Type_
1. `dual` (Boolean)

_Sequence Types_
1. `sek` (List)
2. `kor` (Tuple)

_Mapping Type_
1. `mapa` (Dictionary)

_Additional Types_
1. `void` (Null)
2. `unin` (Undefined)

*Function Declaration*

- `dox function_name(parameters) { code }`
- Example: `dox greet(name) { vokar(•Hello, • + name) }`

*Example Code*
```

  kal x = 5
  nexa y = 3.14
  vix name = •Ternyx•
  dual isAdmin = True
  sek numbers = [1, 2, 3]
  kor coordinates = (1, 2)
  mapa person = {•name•: •Trenyx•, •age•: 25}
  void empty
  unin uninitialized
  
  Here are some Ternyx function codes and examples:
{
 dox greet(name: vix){
  vokar(•Hello, • + name + •!•)}
}



