*Functions*

- `phys_read(addr, len)` - read physical memory
- `phys_write(addr, data)` - write physical memory
- `io_read(port)` - read from I/O port
- `io_write(port, data)` - write to I/O port
- `irq_enable(irq_num)` - enable interrupt request
- `irq_disable(irq_num)` - disable interrupt request
- `dma_transfer(src, dst, len)` - perform direct memory access transfer

*Example Code*

Here's an example code snippet that demonstrates how to use the `phys` keyword and `phys_read` function to access physical memory:

```
guawa
phys mem_addr = 0x10000000;
data = phys_read(mem_addr, 4)
print(data)
```

This code reads 4 bytes from physical memory address `0x10000000` and prints the result.

*Warning*

Direct access to hardware components can be potentially hazardous and may cause system instability or damage. Use these features with caution and only when necessary.


A few simple programs in Guawa:

*Program 1: Guessing Game*

kal guess = kalt("Guess a number between 1 and 10: ")
omit guess == 5~
vokar("You win!")
swot~
vokar("Try again!")

*Program 2: Rock, Paper, Scissors*

kal choice = kalt("Enter rock, paper, or scissors: ")
kal computer = "rock"
omit choice == computer~
vokar("It's a tie!")
swot choice == "rock" and computer == "scissors"~
vokar("You win!")
swot~
vokar("Computer wins!")

*Program 3: Grade Calculator*

kal score = kalt("Enter your score (0-100): ")
omit score >= 90~
vokar("Grade: A")
swot score >= 80~
vokar("Grade: B")
swot score >= 70~
vokar("Grade: C")
swot score >= 60~
vokar("Grade: D")
swot~
vokar("Grade: F")

*Here is the updated program*

vokar("Enter your score (0-100): ")
kal score = kalt()
omit score >= 50~
vokar("Pass! Your score is: ", score)
swot~
vokar("Fail! Your score is: ", score)
vokar("Better luck next time!")
